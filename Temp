https://www.processon.com/view/link/615d4a610e3e74663e97fa0e#map
7）新的日期工具类(常用)
旧版的日期时间API存在的问题。
	1. 
设计不合理
	2. 
时间格式化和解析是线程不安全的
	3. 
时区处理麻烦



Date now = new Date(1999, 1,1);
System.out.println(now);

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
for(int i=0; i<50; i++) {
    new Thread(() -> {
        try {
            Date date = sdf.parse("2019-01-01");
            System.out.println("date=" + date);
        } catch(ParseException e) {
            e.printStackTrace();
        }
    }).start();
}




JDK8日期和时间类
    LocalDate: 表示日期，包含时分秒，格式为2019-10-16
    LocalTime: 表示时间，包含时分秒
    LocalDateTime: 表示日期时间
    DateTimeFormatter: 日期时间格式化类
    Instant: 时间戳，表示一个特定的时间瞬间，主要程序用来统计耗时，支持秒，毫秒，纳秒。
    Duration: 用于计算2个时间（LocalTime，时分秒）的距离
    Period: 用于计算2个日期（LocalDate，年月日）的距离
    ZonedDateTime: 包含时区的时间

    操作：创建（now, of），修改（with, add, minus），比较（isBefore, isAfter, isEqual）。

JDK8的时间格式与解析
    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    LocalDateTime.now().format(dtf);

    LocalDateTime parse = LocalDateTime.parse("2016-10-13 10:10:10", dtf);
JDK8的instant时间戳
    主要程序用来统计耗时，支持秒，毫秒，纳秒。
JDK8的计算日期时间差类
    Duration.between(t1, t2);  //t2-t1
    Period.between(d1, d2);

    时间调整器TemporalAdjuster
    TemporalAdjuster firstDayOfNextMonth = temporal -> {
        LocalDateTime dateTime = (LocalDateTime) temporal;
        return dateTime.plusMonths(1).withDayOfMonth(1);
    }
JDK设置日期时间的时区
    ZonedDateTime now = ZonedDateTime.now(ZoneId.of("Asia/Shanghai"))
    
    withZoneSameInstant(ZoneId) //改时区，改时间
    withZoneSameLocal(ZoneId)  //改时区，不改时间

8）重复注解和类型注解
@Repeatable(xxx.class)

类型注解，可以放在泛型里，变量类型的位置



1. Deep Dive Diagram
这个图是在OC架构图的基础上进行的更深入的细节流程展示。它描述了一个具体的请求的完整flow。
用户请求通过CV，经过wip做负载均衡，被转发到gateway，gateway会请求entitlement来获取用户令牌。在entitlement中，它会先请求EEMS获取用户entitlement数据，如果获取不到，则会请求oc-cache-service来获取之前缓存的entitlement数据，保证EEMS挂掉不会影响OC的使用。entitlement根据获取的ent 数据构建UserContext，并通过jwt生成user token，返回gateway。
假设当前请求是saveclient，需要用到client 服务，gateway就会转发请求到client service。在client service处理过程中，会通过feign client调用所需要的其他服务，如cache service，在完成save client操作之后，也会同步更新elasticsearch中与client有关的index。

在这个图中，如果一个gateway down，请求会被发送到另一个集群。如果其中某个下游微服务down，则发送到这个集群的请求都会失败。

同时在这张图的中间，有一些operation system，例如用于监控的Health monitor和Appdynamics，用于日志的GSP ELK和s3。

2. Engineer
Release tool
针对release tool，第一阶段的开发已经完成了，并在sprint22开始使用了。现在我们设计了phase2要做的需求。根据预期结果，我们列了一下release准备流程在有release tool前后的差异。

Simple monitor
我们看到了swaroopa的反馈。
针对road功能，haibo会work on this
针对monitor数据不准确的问题，我们会将监控内容从pod的运行状态改为spring actuator health api的状态。
针对版本号错误的问题，当前我们还没有重现这个问题，会monitor一段时间，重现之后会尝试解决问题。如果nam team可以提供更详细信息来帮助重现问题会更好。



appdynamics:
1. OC 用来帮助定位PROD环境下的bug。之前有帮助发现过线上out of memory的问题。
2. 使用Data Collector收集关键API的一些参数信息，帮助分析问题。
2. 用来帮助定位性能问题。但是这个目前只能帮助定位后端性能问题，比如某个http调用慢或者某个sql query慢。
如果性能问题发生在前端。目前还没有更好的方式来定位。
3. 用来帮助确定一个请求的请求链路，比如都经过了哪些微服务之类的。
4. 可以用来帮助发现线上发生的API调用error。
