 src/main/java/com/cte4/mac/sidecar/controller/AgentController.java 
@@ -4,16 +4,12 @@ import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import com.cte4.mac.sidecar.exposer.FunctionMetricCollector;
import com.cte4.mac.sidecar.exposer.PrometheusExposer;
import com.cte4.mac.sidecar.exposer.StandardMetricCollector;
import com.cte4.mac.sidecar.model.RuleEntity;
import com.cte4.mac.sidecar.model.TargetEntity;
import com.cte4.mac.sidecar.repos.MetricRepository;
import com.cte4.mac.sidecar.service.AgentAttachException;
import com.cte4.mac.sidecar.service.RuleInjectionException;
import com.cte4.mac.sidecar.service.WeavingService;
import com.cte4.mac.sidecar.service.WebSocketFacade;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
@@ -37,9 +33,6 @@ public class AgentController {
    @Autowired
    WeavingService weaving;

    @Autowired
    PrometheusExposer pExposer;

    @ApiOperation(value = "list all rules", notes = "here is notes")
    @GetMapping(value = "/rules")
    public List<String> listRules() {
@@ -95,22 +88,8 @@ public class AgentController {
            re = te.addRule(re);
            if (re != null) {
                try {
                    String agentID = String.valueOf(te.getPid());
                    // weaving function rule
                    // register ws listener as well as prometheus exposer
                    weaving.applyRule(te, re);
                    if (re.getName().endsWith("FNC")) {
                        log.info("::agent controller::apply function rule:" + rulename);
                        FunctionMetricCollector fcCollector = FunctionMetricCollector.getInstance(agentID);
                        fcCollector.register(pExposer.getRegistry());
                        WebSocketFacade.registerListener(agentID, fcCollector);
                    } else if (re.getName().endsWith("STD")) {
                        log.info("::agent controller::apply standard rule:" + rulename);
                        StandardMetricCollector stdCollector = StandardMetricCollector.getInstance(agentID);
                        stdCollector.addRule(re.getName());
                        stdCollector.register(pExposer.getRegistry());
                        WebSocketFacade.registerListener(agentID, stdCollector);
                    } 
                } catch (RuleInjectionException e) {
                    returnMsg = String.format("fail to apply rule:%s against target:%s, error:%s", rulename, target, e);
                }
@@ -130,17 +109,7 @@ public class AgentController {
                .findFirst();
        if (find.isPresent()) {
            RuleEntity re = find.get();
            String agentID = String.valueOf(te.getPid());
            if (weaving.detachRule(te, new String[] { re.getName() })) {
                if (re.getName().endsWith("STD")) {
                    log.info("::agent controller::detach rule:" + rulename);
                    StandardMetricCollector stdCollector = StandardMetricCollector.getInstance(agentID);
                    stdCollector.removeRule(re.getName());
                    if(stdCollector.isRuleEmpty()) {
                        log.info("::agent controller::remove listener:" + stdCollector.getName());
                        WebSocketFacade.removeListener(agentID, stdCollector);
                    }
                } 
                return "rule detached successfully";
            }
        }
 src/main/java/com/cte4/mac/sidecar/exposer/FunctionMetricCollector.java 
@@ -19,6 +19,7 @@ public class FunctionMetricCollector extends Collector implements MetricsCallbac

    private static Map<String, FunctionMetricCollector> fcRegisery = new ConcurrentHashMap<>();
    private String agentID;
    List<String> fncRules = new ArrayList<>();

    private FunctionMetricCollector(String agentID) {
        this.agentID = agentID;
@@ -90,4 +91,16 @@ public class FunctionMetricCollector extends Collector implements MetricsCallbac
        return agentID;
    }

    public void addRule(String rule) {
        fncRules.add(rule);
    }

    public void removeRule(String rule) {
        fncRules.remove(rule);
    }

    public boolean isRuleEmpty() {
        return fncRules.size() == 0;
    }

}
 src/main/java/com/cte4/mac/sidecar/service/HealthService.java 
@@ -3,6 +3,7 @@ package com.cte4.mac.sidecar.service;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.annotation.PostConstruct;
@@ -12,7 +13,6 @@ import com.cte4.mac.sidecar.model.RuleEntity;
import com.cte4.mac.sidecar.model.TargetEntity;
import com.cte4.mac.sidecar.repos.MetricRepository;
import com.cte4.mac.sidecar.utils.MonitorUtil;
import com.google.common.base.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
@@ -84,7 +84,14 @@ public class HealthService {
                                    });
                                }
                            } else {
                                log.warn("disable the agent for proc as it's unreachable:" + te);
                                String rulename = "MACHEALTH_FNC";
                                Optional<RuleEntity> find = mRepo.getRules().stream()
                                        .filter(rule -> rule.getName().equals(rulename)).findFirst();
                                if (find.isPresent()) {
                                    RuleEntity re = find.get().clone();
                                    weaving.applyListener(te, re);
                                    te.addRule(re);
                                }
                                te.setDisabled(true);
                            }
                        }
 src/main/java/com/cte4/mac/sidecar/service/WeavingService.java 
@@ -6,12 +6,15 @@ import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import com.sun.tools.attach.*;

import com.cte4.mac.sidecar.exposer.FunctionMetricCollector;
import com.cte4.mac.sidecar.exposer.PrometheusExposer;
import com.cte4.mac.sidecar.exposer.StandardMetricCollector;
import com.cte4.mac.sidecar.model.RuleEntity;
import com.cte4.mac.sidecar.model.TargetEntity;

import org.jboss.byteman.agent.install.Install;
import org.jboss.byteman.agent.submit.Submit;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.lang.NonNull;
import org.springframework.stereotype.Component;
@@ -28,6 +31,9 @@ public class WeavingService {
    @Value("${agent.port.range}")
    String portRange;

    @Autowired
    PrometheusExposer pExposer;

    /**
     * Attach the monitoring agent
     * 
@@ -140,6 +146,7 @@ public class WeavingService {
            ByteArrayInputStream is = new ByteArrayInputStream(re.getScript().getBytes());
            String result = submit.addRulesFromResources(Arrays.asList(is));
            te.addRule(re.clone());
            applyListener(te, re);
            log.info(String.format("rule applied, result:%s", result));
        } catch (Exception e) {
            log.error(String.format("fail to apply the rule for target:%s", te), e);
@@ -148,6 +155,46 @@ public class WeavingService {
        return true;
    }

    public void applyListener(TargetEntity te, RuleEntity re) {
        String rulename = re.getName();
        String agentID = String.valueOf(te.getPid());
        if (rulename.endsWith("FNC")) {
            log.info("::agent controller::apply function rule:" + rulename);
            FunctionMetricCollector fcCollector = FunctionMetricCollector.getInstance(agentID);
            fcCollector.addRule(rulename);
            fcCollector.register(pExposer.getRegistry());
            WebSocketFacade.registerListener(agentID, fcCollector);
        } else if (rulename.endsWith("STD")) {
            log.info("::agent controller::apply standard rule:" + rulename);
            StandardMetricCollector stdCollector = StandardMetricCollector.getInstance(agentID);
            stdCollector.addRule(rulename);
            stdCollector.register(pExposer.getRegistry());
            WebSocketFacade.registerListener(agentID, stdCollector);
        } 
    }

    public void detachListener(TargetEntity te, RuleEntity re) {
        String rulename = re.getName();
        String agentID = String.valueOf(te.getPid()); 
        if (rulename.endsWith("STD")) {
            log.info("::agent controller::detach rule:" + rulename);
            StandardMetricCollector stdCollector = StandardMetricCollector.getInstance(agentID);
            stdCollector.removeRule(rulename);
            if(stdCollector.isRuleEmpty()) {
                log.info("::agent controller::remove listener:" + stdCollector.getName());
                WebSocketFacade.removeListener(agentID, stdCollector);
            }
        }
        if (rulename.endsWith("FNC")) {
            FunctionMetricCollector fncCollector = FunctionMetricCollector.getInstance(agentID);
            fncCollector.removeRule(rulename);
            if(fncCollector.isRuleEmpty()) {
                log.info("::agent controller::remove listener:" + fncCollector.getName());
                WebSocketFacade.removeListener(agentID, fncCollector);
            }
        }
    }

    /**
     * retrive the agent handler
     * 
@@ -188,10 +235,12 @@ public class WeavingService {
                            Arrays.asList(new ByteArrayInputStream(re.getScript().getBytes())));
                    te.delRule(re);
                    log.info(String.format("rule[%s] applied, result:%s", re.getName(), result));
                    detachListener(te, re);
                }
            }
        } catch (Exception e) {
            log.error("fail to detach the rule", e);
            return false;
        }
        return true;
    }
 src/main/java/com/cte4/mac/sidecar/service/WebSocketFacade.java 
@@ -123,9 +123,10 @@ public class WebSocketFacade {
        // avoid dup
        if (cbs.indexOf(callback) != -1) {
            log.info(String.format("listner:%s is ALREADY registered for agent:%s", callback.getName(), agentID));
            return;
        }
        cbs.add(callback);

        cbs.add(callback);
        // manage the case when ws is up
        WebSocketFacade wsf = clients.get(agentID);
        if (wsf != null && wsf.listeners.indexOf(callback) == -1) {
